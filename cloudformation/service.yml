AWSTemplateFormatVersion: "2010-09-09"

Description:
  ECS with ASG and ALB

Mappings:
  VpcCidrs:
      default:
        vpc: 10.0.0.0/16
        pubzonea: 10.0.1.0/24
        pubzoneb: 10.0.2.0/24


  InstanceType:
    default:
      balancer: m3.medium
      nginx: m3.medium
      web: m3.medium

Parameters:
  SshKeyName:
    # Type: AWS::EC2::KeyPair::KeyName
    Type: String
    Description: Optional - Name of an existing EC2 KeyPair to enable SSH access to the ECS instances. Set to 'NoValue' if no SSH key is required.
    Default: NoValue
  SpotPrice:
    Type: Number
    Description: spot price for spot instances
    Default: 0.1
  ASGDesiredCapacity:
    Type: Number
    Description: instance count under AutoScalingGroup
    Default: 2
  ASGMaxSize:
    Type: Number
    Description: max instance count under AutoScalingGroup
    Default: 4
  ASGMinSize:
    Type: Number
    Description: min instance count under AutoScalingGroup
    Default: 2
  UseALB:
    Type: String
    AllowedValues: ["yes", "no"]
    Description: select yes if you'd like to use ALB
    Default: "yes"
  AppName:
    Type: String
    Description: select your ECS App Name
    Default: Caddy
  Tag:
    Type: String
    Description: placeholder for Docker image tag generated by CodeBuild
    Default: latest
  # Cluster:
  #   Type: String
  #   Description: ECS Cluster
  #   Default: default
  Repository:
    Type: String
    Description: placeholder for ECR repository
    Default: ""
  MaxPercent:
    Type: Number
    Default: 200
  MinPercent:
    Type: Number
    Default: 50
  ServiceDesiredCount:
    Type: Number
    Default: 2
  UseBuiltInTaskDefinition:
    Type: String
    Default: "yes"
    Description: "select yes if you run this template standalone"
    AllowedValues:
      - "yes"
      - "no"
  AutoscalingGroupOrSpotFleet:
    Type: String
    Default: "AutoscalingGroup"
    Description: "provision the ECS cluster with AutoscalingGroup or SpotFleet"
    AllowedValues:
      - "AutoscalingGroup"
      - "SpotFleet"
  # awslogsGroup:
  #   Type: String
  #   Description: "awslogs log group for ECS"

Conditions:
  HasSshKeyName: !Not [ !Equals [!Ref SshKeyName, NoValue] ]
  SpotOnlyCond: !Not [ !Equals [ !Ref SpotPrice, 0 ] ]
  UseALBCond: !Equals [ !Ref UseALB, "yes" ] 
  UseELBCond: !Equals [ !Ref UseALB, "no" ] 
  UseBuiltInTaskDefinitionCond: !Equals [ !Ref UseBuiltInTaskDefinition, "yes" ]
  EnableASGCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "AutoscalingGroup" ]
  DisableASGCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "SpotFleet" ]
  SpotFleetCond: !Equals [ !Ref AutoscalingGroupOrSpotFleet, "SpotFleet" ]



Resources:
###################
# AMI INFO Function
###################
  AMIInfoFunction:
    Type: AWS::Lambda::Function
    Properties:
      Code:
        ZipFile: >
          
          //A sample Lambda function that looks up the latest AMI ID for a given region and architecture.

          // Map instance architectures to an AMI name pattern

          var archToAMINamePattern = {
              "PV64": "amzn-ami-pv*x86_64-ebs",
              "HVM64": "amzn-ami-hvm*x86_64-gp2",
              "HVMG2": "amzn-ami-graphics-hvm*x86_64-ebs*",
              "ECS": "amzn-ami-*amazon-ecs-optimized"
          };

          var aws = require("aws-sdk");
          
          exports.handler = function(event, context) {
          
              console.log("REQUEST RECEIVED:\n" + JSON.stringify(event));
              
              // For Delete requests, immediately send a SUCCESS response.
              if (event.RequestType == "Delete") {
                  sendResponse(event, context, "SUCCESS");
                  return;
              }
          
              var responseStatus = "FAILED";
              var responseData = {};
          
              var ec2 = new aws.EC2({region: event.ResourceProperties.Region});
              var describeImagesParams = {
                  Filters: [{ Name: "name", Values: [archToAMINamePattern[event.ResourceProperties.Architecture]]}],
                  Owners: [event.ResourceProperties.Architecture == "HVMG2" ? "679593333241" : "amazon"]
              };
          
              // Get AMI IDs with the specified name pattern and owner

              ec2.describeImages(describeImagesParams, function(err, describeImagesResult) {
                  if (err) {
                      responseData = {Error: "DescribeImages call failed"};
                      console.log(responseData.Error + ":\n", err);
                  }
                  else {
                      var images = describeImagesResult.Images;
                      // Sort images by name in decscending order. The names contain the AMI version, formatted as YYYY.MM.Ver.
                      images.sort(function(x, y) { return y.Name.localeCompare(x.Name); });
                      for (var j = 0; j < images.length; j++) {
                          if (isBeta(images[j].Name)) continue;
                          responseStatus = "SUCCESS";
                          responseData["Id"] = images[j].ImageId;
                          break;
                      }
                  }
                  sendResponse(event, context, responseStatus, responseData);
              });
          };

          // Check if the image is a beta or rc image. The Lambda function won't return any of those images.

          function isBeta(imageName) {
              return imageName.toLowerCase().indexOf("beta") > -1 || imageName.toLowerCase().indexOf(".rc") > -1;
          }


          // Send response to the pre-signed S3 URL 

          function sendResponse(event, context, responseStatus, responseData) {
          
              var responseBody = JSON.stringify({
                  Status: responseStatus,
                  Reason: "See the details in CloudWatch Log Stream: " + context.logStreamName,
                  PhysicalResourceId: context.logStreamName,
                  StackId: event.StackId,
                  RequestId: event.RequestId,
                  LogicalResourceId: event.LogicalResourceId,
                  Data: responseData
              });
          
              console.log("RESPONSE BODY:\n", responseBody);
          
              var https = require("https");
              var url = require("url");
          
              var parsedUrl = url.parse(event.ResponseURL);
              var options = {
                  hostname: parsedUrl.hostname,
                  port: 443,
                  path: parsedUrl.path,
                  method: "PUT",
                  headers: {
                      "content-type": "",
                      "content-length": responseBody.length
                  }
              };
          
              console.log("SENDING RESPONSE...\n");
          
              var request = https.request(options, function(response) {
                  console.log("STATUS: " + response.statusCode);
                  console.log("HEADERS: " + JSON.stringify(response.headers));
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
          
              request.on("error", function(error) {
                  console.log("sendResponse Error:" + error);
                  // Tell AWS Lambda that the function execution is done  
                  context.done();
              });
            
              // write data to request body
              request.write(responseBody);
              request.end();
          }      

      Handler: "index.handler"
      Runtime: nodejs6.10
      Timeout: 300
      Role: !GetAtt LambdaExecutionRole.Arn
      Tags:
        - Key: custom:cloudformation:purpose
          Value: AMIInfo


  AMIInfo:
    Type: Custom::AMIInfo
    Properties:
      ServiceToken: !GetAtt AMIInfoFunction.Arn
      Region: !Ref "AWS::Region"
      # Architecture: HVM64
      Architecture: ECS
        # Fn::FindInMap:
        # - AWSInstanceType2Arch
        # - !Ref InstanceType
        # - Arch

#######################
# CloudWatch Log Group
#######################
  myLogGroup: 
    Type: "AWS::Logs::LogGroup"
    Properties: 
      LogGroupName: !Sub /aws/ECS/${AppName}-${AWS::StackName}
      RetentionInDays: 7


#######################
#   IAM
#######################

  ECSServiceRoleForEC2:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ec2.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role'    
        Policies:
        - PolicyName: ecs-instance-create-tag
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - ec2:CreateTags
              Resource: "*"


  ECSServiceRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - ecs.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - 'arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceRole'   


  ECSAutoScalingRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - application-autoscaling.amazonaws.com
        Path: /
        Policies:
        - PolicyName: ecs-service-autoscaling
          PolicyDocument:
            Statement:
            - Effect: Allow
              Action:
              - application-autoscaling:*
              - cloudwatch:DescribeAlarms
              - cloudwatch:PutMetricAlarm
              - ecs:DescribeServices
              - ecs:UpdateService
              Resource: "*"
  

  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      Path: "/"
      Policies:
      - PolicyName: root
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Effect: Allow
            Action:
            - logs:CreateLogGroup
            - logs:CreateLogStream
            - logs:PutLogEvents
            Resource: arn:aws:logs:*:*:*
          - Effect: Allow
            Action:
            - ec2:DescribeImages
            Resource: "*"

  IAMFleetRole:
    Type: AWS::IAM::Role
    Properties:
        AssumeRolePolicyDocument:
            Version: '2012-10-17'
            Statement:
              - Action: 
                  - 'sts:AssumeRole'
                Effect: Allow
                Principal:
                  Service:
                    - spotfleet.amazonaws.com
        Path: /
        ManagedPolicyArns:
            - arn:aws:iam::aws:policy/service-role/AmazonEC2SpotFleetRole   

#######################
#   VPC / infra
#######################
  Vpc:
    Type: AWS::EC2::VPC
    Properties:
      Tags: 
        -
          Key: Name
          Value: cfn-vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, vpc ]
      EnableDnsSupport: true
      EnableDnsHostnames: true

  VPCGWAttach:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref Vpc

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    #Properties:

  PublicRT:
    Type: AWS::EC2::RouteTable
    Properties:
      Tags:
        -
          Key: Name
          Value: public-rt
      VpcId: !Ref Vpc

  PublicRouteViaIgw:
    Type: AWS::EC2::Route
    Properties: 
      RouteTableId: !Ref PublicRT
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway


  PublicZoneA:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        -
          Key: Name
          Value: pub-zone-a
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, pubzonea ]
      AvailabilityZone: 
        Fn::Select:
          - 0 
          - Fn::GetAZs: ""

  PublicZoneB:
    Type: AWS::EC2::Subnet
    Properties:
      Tags:
        -
          Key: Name
          Value: pub-zone-b
      VpcId: !Ref Vpc
      CidrBlock: !FindInMap [ VpcCidrs, default, pubzoneb ]
      AvailabilityZone: 
        Fn::Select:
          - 1 
          - Fn::GetAZs: ""


  PublicZoneARouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicZoneA

  PublicZoneBRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      RouteTableId: !Ref PublicRT
      SubnetId: !Ref PublicZoneB




#######################
#  ASG / EC2 / ELB / ALB
#######################

  SgLB:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sg for LoadBalancer"
      GroupDescription: "sg for LoadBalancer"
      #VpcId: !ImportValue {"Fn::Sub" : "${VpcStackName}-VpcId"}
      VpcId: !Ref Vpc
  SgEC2:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupName: "sg for ec2"
      GroupDescription: "sg for ec2"
      #VpcId: !ImportValue {"Fn::Sub" : "${VpcStackName}-VpcId"}
      VpcId: !Ref Vpc

  ingress1:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 80
      ToPort: 80
      CidrIp: 0.0.0.0/0

  # ingress2:
  #   Type: AWS::EC2::SecurityGroupIngress
  #   Properties:
  #     GroupId: !Ref SgLB
  #     IpProtocol: tcp
  #     FromPort: 22
  #     ToPort: 22
  #     CidrIp: 0.0.0.0/0

  ingress3:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      GroupId: !Ref SgEC2
      SourceSecurityGroupId: !Ref SgLB
      IpProtocol: tcp
      FromPort: 0
      ToPort: 65535
      #CidrIp: 10.0.0.0/16


#######################
#   ALB
#######################   

  publicALB:
    Condition: UseALBCond
    Type: "AWS::ElasticLoadBalancingV2::LoadBalancer"
    Properties:

      Name: !Sub
        - ${StackName}-alb
        -
          StackName: !Ref AWS::StackName
      Scheme: internet-facing
      SecurityGroups:
        - !Ref SgLB
      Subnets:
        - !Ref PublicZoneA
        - !Ref PublicZoneB
      Tags:
        -
          Key: Name
          Value: !Sub
            - ${StackName}-alb
            - StackName: !Ref AWS::StackName

  ALBListener:
    Condition: UseALBCond
    Type : AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        -
          Type: forward
          TargetGroupArn: !Ref publicALBTargetGroup
      LoadBalancerArn: !Ref publicALB
      Port: 80
      Protocol: HTTP

  publicALBTargetGroup:
    Condition: UseALBCond
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 5
      HealthyThresholdCount: 2
      Matcher:
        HttpCode: 200-299
      Name: !Sub
        - ${StackName}-http-tg
        - StackName: !Ref AWS::StackName
      Port: 80
      Protocol: HTTP
      Tags:
        - 
          Key: Name
          Value: alb-tg        
      UnhealthyThresholdCount: 3
      VpcId: !Ref Vpc

 
  EC2InstanceProfile:
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: /
      Roles:
        - !Ref ECSServiceRoleForEC2

  SpotFleetInstanceProfile:
    Condition: SpotFleetCond
    Type: "AWS::IAM::InstanceProfile"
    Properties: 
      Path: /
      Roles:
        - !Ref IAMFleetRole

  ASGLC:
    Condition: EnableASGCond
    Type: "AWS::AutoScaling::LaunchConfiguration"
    Properties:
      AssociatePublicIpAddress: true
      IamInstanceProfile: !Ref EC2InstanceProfile
      ImageId: !GetAtt AMIInfo.Id
        # !FindInMap
        #   - AmiId
        #   - !Ref AWS::Region
        #   - default
      #InstanceId: String
      InstanceMonitoring: true
      InstanceType:
        !FindInMap
          - InstanceType
          - default
          - web
      #KernelId: String
      KeyName:
        !If 
          - HasSshKeyName
          - !Ref SshKeyName
          - !Ref AWS::NoValue
      #PlacementTenancy: String
      #RamDiskId: String
      SecurityGroups:
        - !Ref SgEC2
      SpotPrice: 
        !If 
          - SpotOnlyCond
          - !Ref SpotPrice
          - !Ref AWS::NoValue
      UserData: 
        "Fn::Base64": 
          !Sub |
            #!/bin/bash
            yum update -y
            yum install -y aws-cfn-bootstrap
            echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
            # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
            /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource ASGDefault --region ${AWS::Region} 

###################
# Spot fleet
###################

  SpotFleet:
    Condition: SpotFleetCond
    Type: AWS::EC2::SpotFleet
    Properties:
      SpotFleetRequestConfigData:
        AllocationStrategy: diversified
        SpotPrice: '0.1'
        IamFleetRole: !GetAtt IAMFleetRole.Arn
        TargetCapacity: !Ref ASGDesiredCapacity
        LaunchSpecifications:
        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: m3.medium
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneA
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 

        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: m3.medium
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneB
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 

        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: m4.large
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneA
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 

        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: m4.large
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneB
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 

        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: c4.large
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneA
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 

        - EbsOptimized: 'false'
          WeightedCapacity: 1
          IamInstanceProfile: 
            Arn: !GetAtt EC2InstanceProfile.Arn
          InstanceType: c4.large
          ImageId: !GetAtt AMIInfo.Id
          KeyName:
            !If 
              - HasSshKeyName
              - !Ref SshKeyName
              - !Ref AWS::NoValue
          Monitoring:
            Enabled: 'true'
          NetworkInterfaces:
            - AssociatePublicIpAddress: true
              DeviceIndex: 0
              SubnetId: !Ref PublicZoneB
              Groups:
                - Fn::GetAtt:
                  - SgEC2
                  - GroupId
          UserData: 
            "Fn::Base64": 
              !Sub |
                #!/bin/bash
                yum update -y
                yum install -y aws-cfn-bootstrap aws-cli
                instance_id=$(curl -s http://169.254.169.254/latest/meta-data/instance-id)
                aws --region ${AWS::Region} ec2 create-tags --resources $instance_id  --tags \
                Key=Name,Value="ecs-${AWS::StackName}-spot"               
                echo ECS_CLUSTER="${AWS::StackName}-ecs-cluster" >> /etc/ecs/ecs.config
                # /opt/aws/bin/cfn-init -v -s ${AWS::StackId} -r ASGLC --region ${AWS::Region}
                /opt/aws/bin/cfn-signal -e $? --stack ${AWS::StackName} --resource SpotFleet --region ${AWS::Region} 


###################
# ASG
###################


  ASGDefault:
    Condition: EnableASGCond
    Type: "AWS::AutoScaling::AutoScalingGroup"
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: !Ref ASGMinSize
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true
    Properties:
      AvailabilityZones:
        -
          Fn::Select:
            - 0 
            - Fn::GetAZs: ""
        -
          Fn::Select:
            - 1
            - Fn::GetAZs: ""
      #Cooldown: String
      HealthCheckGracePeriod: 60
      # HealthCheckType: String
      #InstanceId: String
      LaunchConfigurationName: !Ref ASGLC
      #LoadBalancerNames:
      #  - 
      MetricsCollection:
        - Granularity: 1Minute
      MaxSize: !Ref ASGMaxSize
      MinSize: 
        !If
          - EnableASGCond
          - !Ref ASGMinSize
          - 0
      DesiredCapacity: 
        !If
          - EnableASGCond
          - !Ref ASGDesiredCapacity
          - 0
      # NotificationConfigurations:
      #   - NotificationConfigurations
      # PlacementGroup: String
      Tags:
        - 
          Key: Name
          #Value: {"Fn::Sub" : "${StackName}-cfn-nginx"}
          Value: !Sub
            - "${StackName}-ecs-instance"
            - StackName: !Ref AWS::StackName
          PropagateAtLaunch: true
      # TargetGroupARNs:
      #   !If 
      #     - UseALBCond
      #     - [ !Ref publicALBTargetGroup ]
      #     - !Ref AWS::NoValue
      VPCZoneIdentifier:
        - !Ref PublicZoneA
        - !Ref PublicZoneB

  ECSDefaultCluster:
    Type: "AWS::ECS::Cluster"
    Properties:
      ClusterName: !Sub ${AWS::StackName}-ecs-cluster


  # ECSWebTD:
  #   Type: "AWS::ECS::TaskDefinition"
  #   Properties: 
  #     ContainerDefinitions: 
  #       - 
  #         Name: 
  #           Ref: "AppName"
  #         MountPoints: 
  #           - 
  #             SourceVolume: "my-vol"
  #             ContainerPath: "/var/www/my-vol"
  #         Image: "amazon/amazon-ecs-sample"
  #         Cpu: "256"
  #         PortMappings: 
  #           - 
  #             ContainerPort: 80
  #               # Ref: "80"
  #             HostPort: 0
  #               # Ref: "80"
  #         EntryPoint: 
  #           - "/usr/sbin/apache2"
  #           - "-D"
  #           - "FOREGROUND"
  #         Memory: "500"
  #         Essential: "true"
  #       - 
  #         Name: "busybox"
  #         Image: "busybox"
  #         Cpu: "10"
  #         EntryPoint: 
  #           - "sh"
  #           - "-c"
  #         Memory: "500"
  #         Command: 
  #           - "/bin/sh -c \"while true; do /bin/date > /var/www/my-vol/date; sleep 1; done\""
  #         Essential: "false"
  #         VolumesFrom: 
  #           - 
  #             SourceContainer: 
  #               Ref: "AppName"
  #     Volumes: 
  #       - 
  #         Host: 
  #           SourcePath: "/var/lib/docker/vfs/dir/"
  #         Name: "my-vol"  


  ECSCaddyTD:
      Type: AWS::ECS::TaskDefinition
      Properties: 
        Family: !Sub ${AppName}-${ECSDefaultCluster}
        ContainerDefinitions: 
          - 
            Name: Caddy
            #Image: "abiosoft/caddy:php"
            # Image: !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Image:
              !If
                - UseBuiltInTaskDefinitionCond
                - "abiosoft/caddy:php"
                - !Sub ${AWS::AccountId}.dkr.ecr.${AWS::Region}.amazonaws.com/${Repository}:${Tag}
            Cpu: "512"
            PortMappings: 
              - 
                ContainerPort: 2015
                HostPort: 0
            Memory: "1024"
            Ulimits:
              - Name: nofile
                HardLimit: "10240"
                SoftLimit: "10240"
              
            Essential: "true"
            LogConfiguration:
              LogDriver: "awslogs"
              Options:
                awslogs-region: !Ref AWS::Region
                awslogs-group: !Sub /aws/ECS/${AppName}-${AWS::StackName}
                awslogs-stream-prefix: !Ref AppName



  ECSService:
    DependsOn: [publicALB, publicALBTargetGroup, ALBListener]
    Type: "AWS::ECS::Service"
    Properties: 
      Cluster: !Ref ECSDefaultCluster
      DeploymentConfiguration:
        MaximumPercent: !Ref MaxPercent
        MinimumHealthyPercent: !Ref MinPercent
      DesiredCount: !Ref ServiceDesiredCount
      LoadBalancers: 
          - ContainerName: !Ref AppName
            ContainerPort: 2015
            TargetGroupArn: !Ref publicALBTargetGroup
      Role: !Ref ECSServiceRole
      #TaskDefinition: !Ref ECSWebTD
      TaskDefinition: !Ref ECSCaddyTD
      # ServiceName: !Sub "${AppName}-${AWS::StackName}"
      PlacementStrategies: 
        - Type: spread
          Field: attribute:ecs.availability-zone
        - Type: spread
          Field: host


  ECSscalableTarget:
    DependsOn: ECSService
    Type: AWS::ApplicationAutoScaling::ScalableTarget
    Properties:
      MaxCapacity: 10
      MinCapacity: 2
      ResourceId: 
        Fn::Join:
          - ""
          -
            - "service/"
            - !Ref ECSDefaultCluster
            - "/"
            - !GetAtt ECSService.Name
      RoleARN: !GetAtt ECSAutoScalingRole.Arn
      ScalableDimension: ecs:service:DesiredCount
      ServiceNamespace: ecs

######################
# scale ECS service when too many ALB 5XX error
######################
  ECSscalingPolicy01:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]TooManyALB5XX"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        # AdjustmentType: ExactCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200

######################
# scale ECS service when service CPUUtilization increases
######################
  ECSscalingPolicy02:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[+]ServiceCPUUtilHigh"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: 200    

  ECSscalingPolicy03:
    Type: AWS::ApplicationAutoScaling::ScalingPolicy
    Properties:
      PolicyName: "[-]ServiceCPUUtilLow"
      PolicyType: StepScaling
      ScalingTargetId: !Ref ECSscalableTarget
      StepScalingPolicyConfiguration:
        AdjustmentType: PercentChangeInCapacity
        Cooldown: 60
        MetricAggregationType: Average
        StepAdjustments:
        - MetricIntervalLowerBound: 0
          ScalingAdjustment: -50        


######################
# Scaling Policies for Autoscaling Group
######################          
  ASGscalingPolicy01:
    Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200        
  ASGscalingPolicy02:
    Condition: EnableASGCond         
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy03:
    Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: StepScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      # ScalingAdjustment: 1  
      StepAdjustments:   
        - MetricIntervalLowerBound: 0
          # MetricIntervalUpperBound: 60
          ScalingAdjustment: 200  

  ASGscalingPolicy04:
    Condition: EnableASGCond        
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      ScalingAdjustment: -30
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

  ASGscalingPolicy05:
    Condition: EnableASGCond
    Type: AWS::AutoScaling::ScalingPolicy
    Properties: 
      AdjustmentType: PercentChangeInCapacity
      PolicyType: SimpleScaling
      # Cooldown: 60
      AutoScalingGroupName: !Ref ASGDefault
      ScalingAdjustment: -30 
      # StepAdjustments:   
      #   - MetricIntervalLowerBound: 0
      #     # MetricIntervalUpperBound: 60
      #     ScalingAdjustment: -30

######################
# Alarm to Scale ASG
######################
  ASGCPUHighAlarmScaleOut:
    Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ASG average CPU Utilization is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy01]
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value: !Ref ASGDefault
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  ECSClusterCPURsvHighScaleOut:
    Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '70'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy02]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvHighScaleOut:
    Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is high
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy03]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: MemoryReservation


  ECSClusterCPURsvLowScaleIn:
    Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Cluster CPUReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy04]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUReservation

  ECSClusterMemRsvLowScaleIn:
    Condition: EnableASGCond
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '5'
      Statistic: Average
      Threshold: '40'
      AlarmDescription: Alarm if our ECS Cluster MemoryReservation is low
      Period: '60'
      AlarmActions: [!Ref ASGscalingPolicy05]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: MemoryReservation

#############################
# Alarm to Scale ECS Service
#############################


  ALB500sAlarmScaleUp:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if our ALB generates too many HTTP 500s.
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicy01]
      Namespace: AWS/ApplicationELB
      Dimensions:
      - Name: ECSService
        Value: !GetAtt ECSService.Name
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: HTTPCode_ELB_5XX_Count





  ServiceCPUUtilAlarmScaleOut:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '60'
      AlarmDescription: Alarm if our ECS Service CPU Utilization is too high
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicy02]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt ECSService.Name
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: GreaterThanOrEqualToThreshold
      MetricName: CPUUtilization

  ServiceCPUUtilAlarmScaleIn:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '20'
      AlarmDescription: Alarm if our ECS Service CPU Utilization is too low
      Period: '60'
      AlarmActions: [!Ref ECSscalingPolicy03]
      Namespace: AWS/ECS
      Dimensions:
      - Name: ServiceName
        Value: !GetAtt ECSService.Name
      - Name: ClusterName
        Value: !Ref ECSDefaultCluster
      ComparisonOperator: LessThanOrEqualToThreshold
      MetricName: CPUUtilization

######################
#  CWE 
######################

  ECSEventsRule:
    Type: "AWS::Events::Rule"
    Properties: 
      Description: "all ECS events"
      EventPattern:
        source: 
          - aws.ecs
        detail-type:
          - "ECS Task State Change"
          - "ECS Container Instance State Change"
        detail:
          clusterArn: 
            - !Ref ECSDefaultCluster
      Name: !Sub "ECS-Events-${AWS::StackName}"
      # RoleArn: String
      # ScheduleExpression: String
      # State: String
      Targets:
        - Arn: !Ref ECSEventsSNSTopic
          Id: !Sub "ECS-Events-SNS-${AWS::StackName}"


######################
# SNS
######################
  ECSEventsSNSTopic:
    Type: "AWS::SNS::Topic"
    Properties: 
      DisplayName: !Sub "ECS-Events-${AWS::StackName}"
      # Subscription:
      #   SNS Subscription
      TopicName: !Sub "ECS-Events-${AWS::StackName}"



######################
# Outputs
######################
Outputs:
  StackName:
    Value:
      !Ref AWS::StackName
  AZs:
    Value:
      Fn::Join:
        - ""
        - !GetAZs ""
  VpcId:
    Value:
      !Ref Vpc
    Description: The VPC ID of the created VPC  
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-VpcId
          - StackName: !Ref AWS::StackName
  LoadBalancerURL:
    Value:
      !Sub
        - 'http://${LBDNS}'
        -
          LBDNS: !GetAtt publicALB.DNSName

  SNSTopic:
    Value: !GetAtt ECSEventsSNSTopic.TopicName

  ECSServiceName: 
    Value: !GetAtt ECSService.Name


  PublicZoneA:
    Value:
      !Ref PublicZoneA
    Description: Public Zone A
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-PublicZoneA
          - StackName: !Ref AWS::StackName
  PublicZoneB:
    Value:
      !Ref PublicZoneB
    Description: Public Zone B
    Export:
      Name: 
        "Fn::Sub": 
          - ${StackName}-PublicZoneB
          - StackName: !Ref AWS::StackName


